import json

# Danh s√°ch c√¢u h·ªèi gi·∫£ ƒë·ªãnh (c√≥ th·ªÉ ƒë∆∞·ª£c load t·ª´ JSON)
questions_db = [
    {
        "question": "Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√† g√¨?",
        "options": ["H√† N·ªôi", "TP. H·ªì Ch√≠ Minh", "ƒê√† N·∫µng", "C·∫ßn Th∆°"],
        "correct_answer": "A",
        "explanation": "H√† N·ªôi l√† th·ªß ƒë√¥ c·ªßa Vi·ªát Nam."
    }
]

def view_questions():
    """Hi·ªÉn th·ªã danh s√°ch c√¢u h·ªèi hi·ªán c√≥."""
    if not questions_db:
        print("Danh s√°ch c√¢u h·ªèi hi·ªán ƒëang tr·ªëng.")
        return
    
    print("\n Danh s√°ch c√¢u h·ªèi:")
    for idx, q in enumerate(questions_db, start=1):
        print(f"{idx}. {q['question']}")
        for i, option in enumerate(q["options"], start=65):
            print(f"  {chr(i)}. {option}")
        print(f" ƒê√°p √°n ƒë√∫ng: {q['correct_answer']}")
        if q.get("explanation"):
            print(f"‚ÑπÔ∏è Gi·∫£i th√≠ch: {q['explanation']}")
        print("-" * 50)

def delete_question():
    """X√≥a m·ªôt c√¢u h·ªèi kh·ªèi danh s√°ch."""
    if not questions_db:
        print("Danh s√°ch c√¢u h·ªèi hi·ªán ƒëang tr·ªëng.")
        return

    view_questions()
    try:
        question_idx = int(input(" Nh·∫≠p s·ªë th·ª© t·ª± c√¢u h·ªèi c·∫ßn x√≥a: ").strip())
        if 1 <= question_idx <= len(questions_db):
            deleted_question = questions_db.pop(question_idx - 1)
            print(f" ƒê√£ x√≥a c√¢u h·ªèi: \"{deleted_question['question']}\"")
        else:
            print(" S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá.")
    except ValueError:
        print(" Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.")

def search_questions():
    """T√¨m ki·∫øm c√¢u h·ªèi theo t·ª´ kh√≥a."""
    keyword = input("üîç Nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm: ").strip().lower()
    results = [q for q in questions_db if keyword in q["question"].lower()]
    
    if results:
        print("\nüîé K·∫øt qu·∫£ t√¨m ki·∫øm:")
        for idx, q in enumerate(results, start=1):
            print(f"{idx}. {q['question']}")
            for i, option in enumerate(q["options"], start=65):
                print(f"  {chr(i)}. {option}")
            print(f" ƒê√°p √°n ƒë√∫ng: {q['correct_answer']}")
            if q.get("explanation"):
                print(f"‚ÑπÔ∏è Gi·∫£i th√≠ch: {q['explanation']}")
            print("-" * 50)
    else:
        print(" Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o.")

def import_from_json():
    """Nh·∫≠p c√¢u h·ªèi t·ª´ file JSON."""
    global questions_db
    filename = input(" Nh·∫≠p t√™n file ƒë·ªÉ nh·∫≠p (m·∫∑c ƒë·ªãnh: questions.json): ").strip() or "questions.json"
    try:
        with open(filename, "r", encoding="utf-8") as file:
            imported_questions = json.load(file)
        
        if not isinstance(imported_questions, list):
            print(f" File {filename} kh√¥ng ch·ª©a danh s√°ch h·ª£p l·ªá.")
            return

        action = input(" B·∫°n c√≥ mu·ªën g·ªôp d·ªØ li·ªáu hay ghi ƒë√® danh s√°ch hi·ªán t·∫°i? (g·ªôp: y, ghi ƒë√®: n): ").strip().lower()
        if action == "y":
            questions_db.extend(imported_questions)
            print(f" D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c g·ªôp t·ª´ file {filename}.")
        elif action == "n":
            questions_db = imported_questions
            print(f" Danh s√°ch c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c ghi ƒë√® t·ª´ file {filename}.")
        else:
            print(" H·ªßy thao t√°c nh·∫≠p d·ªØ li·ªáu.")
    except FileNotFoundError:
        print(f" Kh√¥ng t√¨m th·∫•y file {filename}.")
    except json.JSONDecodeError:
        print(f" File {filename} kh√¥ng h·ª£p l·ªá.")

def export_to_json():
    """Xu·∫•t c√¢u h·ªèi ra file JSON."""
    filename = input(" Nh·∫≠p t√™n file ƒë·ªÉ xu·∫•t (m·∫∑c ƒë·ªãnh: questions.json): ").strip() or "questions.json"
    try:
        with open(filename, "w", encoding="utf-8") as file:
            json.dump(questions_db, file, ensure_ascii=False, indent=4)
        print(f" D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c xu·∫•t ra file {filename}.")
    except Exception as e:
        print(f" ƒê√£ x·∫£y ra l·ªói khi xu·∫•t file: {e}")

def update_question():
    """C·∫≠p nh·∫≠t n·ªôi dung c·ªßa m·ªôt c√¢u h·ªèi."""
    if not questions_db:
        print("Danh s√°ch c√¢u h·ªèi hi·ªán ƒëang tr·ªëng.")
        return

    view_questions()
    try:
        question_idx = int(input(" Nh·∫≠p s·ªë th·ª© t·ª± c√¢u h·ªèi c·∫ßn c·∫≠p nh·∫≠t: ").strip())
        if 1 <= question_idx <= len(questions_db):
            question = questions_db[question_idx - 1]
            
            print(f"\n C√¢u h·ªèi hi·ªán t·∫°i: \"{question['question']}\"")
            new_question = input(" Nh·∫≠p n·ªôi dung c√¢u h·ªèi m·ªõi (b·ªè tr·ªëng ƒë·ªÉ gi·ªØ nguy√™n): ").strip()
            if new_question:
                question['question'] = new_question

            for idx, option in enumerate(question['options'], start=1):
                print(f"  {idx}. {option}")
                new_option = input(f" Nh·∫≠p n·ªôi dung l·ª±a ch·ªçn {idx} m·ªõi (b·ªè tr·ªëng ƒë·ªÉ gi·ªØ nguy√™n): ").strip()
                if new_option:
                    question['options'][idx - 1] = new_option

            new_correct_answer = input(" Nh·∫≠p ƒë√°p √°n ƒë√∫ng m·ªõi (A, B, C, D - b·ªè tr·ªëng ƒë·ªÉ gi·ªØ nguy√™n): ").strip().upper()
            if new_correct_answer in ["A", "B", "C", "D"]:
                question['correct_answer'] = new_correct_answer
            elif new_correct_answer:
                print(" ƒê√°p √°n kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n gi√° tr·ªã c≈©.")

            new_explanation = input("‚ÑπÔ∏è Nh·∫≠p gi·∫£i th√≠ch m·ªõi (b·ªè tr·ªëng ƒë·ªÉ gi·ªØ nguy√™n): ").strip()
            if new_explanation:
                question['explanation'] = new_explanation

            print(" C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.")
        else:
            print(" S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá.")
    except ValueError:
        print(" Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")

# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    while True:
        print("\n MENU:")
        print("1. Xem danh s√°ch c√¢u h·ªèi")
        print("2. Th√™m/x√≥a/c·∫≠p nh·∫≠t c√¢u h·ªèi")
        print("3. T√¨m ki·∫øm c√¢u h·ªèi")
        print("4. Nh·∫≠p/Xu·∫•t JSON")
        print("5. Tho√°t")
        choice = input(" Ch·ªçn ch·ª©c nƒÉng: ").strip()
        
        if choice == "1":
            view_questions()
        elif choice == "2":
            update_question()
        elif choice == "3":
            search_questions()
        elif choice == "4":
            import_from_json()
            export_to_json()
        elif choice == "5":
            print(" T·∫°m bi·ªát!")
            break
        else:
            print(" L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
